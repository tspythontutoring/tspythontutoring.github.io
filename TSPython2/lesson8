<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>TSPython</title>
	<link rel="stylesheet" type="text/css" href="style.css">
  <script src="script.js"></script>
</head>
<body>
 	<div class="banner">
	  <a class="banner-title" href = "/">TSPython</a>
	  <div class="banner-links">
	    <a class="banner-link" href="lesson1">Introduction</a>
	    <a class="banner-link" href="lesson2">Conditionals</a>
	    <a class="banner-link" href="lesson3">Loops</a>
	    <a class="banner-link" href="lesson4">Lists</a>
	    <a class="banner-link" href="lesson5">Functions</a>
      <a class="banner-link" href="lesson6">Dictionaries</a>
      <a class="banner-link" href="lesson7">Objects</a>
      <a class="banner-link" style = "color: #5CE1E6" href="lesson8">Decorators</a>
      <a class="banner-link" href="lesson9">Generators</a>
      <a class="banner-link" href="lesson10">Files</a>
      <a class="banner-link" href="other">Other</a>
	  </div>
	</div>
	<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQ1MVLMDKXrQmtc95rM7ZXQO6YcPpCrYmqx6YbTOf57OnCvSDPYyjYWO06uqkuEBWzJoWBVmHQlXCIw/embed?start=false&loop=false&delayms=3000" frameborder="0" height="500"></iframe>

	<iframe src="text.html" height="501" style ="margin-top:0px"></iframe>

	<div class="code-container">
<code>#1. Create a function that generates a multiplier function.
  # Ex. generate_multiplier(3) returns a function that will accept a number and return that number tripled.

def generate_multiplier(m):
    def multiplier(n):
        return m * n
    return multiplier

# Test the function
times_3 = generate_multiplier(3)
print(times_3(4))

times_5 = generate_multiplier(5)
print(times_5(6))

#2. Write a function that takes in three parameters: two numbers (x and y) and a function (operation). The function should call operation with x and y as arguments, and return the result.
  #Ex. calculator(3, 5, add) returns 8
def add(x, y):
    return x + y

def calculator(x, y, operation):
    return operation(x, y)

result = calculator(3, 5, add) # 3 + 5
print(result) # should print 8

#3. Write a decorator function that adds a message before and after a function call. Use this decorator to modify a function that prints "Hello, world!".
def my_decorator(func):
    def wrapper():
        print("Before function call")
        func()
        print("After function call")
    return wrapper

@my_decorator
def my_func():
    print("Hello, world!")

my_func()

#4. Write a decorator function that prints the name of the function it decorates before calling it. Use this decorator to modify two functions, one that returns the square of a number and another that returns the cube of a number.
def print_function_name(func):
    def wrapper(*args, **kwargs):
        print("Calling function:", func.__name__)
        return func(*args, **kwargs)
    return wrapper

@print_function_name
def square(n):
    return n ** 2

@print_function_name
def cube(n):
    return n ** 3

print(square(2)) 
print(cube(3)) 

#5. Write a decorator function that prints the arguments and the result of those arguments of the function it decorates. Use this decorator to modify a function that accepts a string and a number, and returns the string repeated that many times. 
def log_args(func):
    def wrapper(*args, **kwargs):
        print("Arguments:", args, kwargs)
        result = func(*args, **kwargs)
        print("Result:", result)
        return result
    return wrapper

@log_args
def repeat_string(string, n):
    return string * n

print(repeat_string("hello", 3))

#6. Write a decorator function that measures the time it takes for a function to run and prints the result. Use this decorator to modify a function that performs a complex calculation.
import time

def time_it(func):
    def wrapper(*args, **kwargs):
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print("Elapsed time: ", end - start, "seconds")
        return result
    return wrapper

@time_it
def my_complex_calculation(x, y):
    # perform complex calculation here
    time.sleep(2)
    return x * y

result = my_complex_calculation(5, 10)
print(result)

#7. Write a decorator function that adds a prefix and suffix to the result of a function. The prefix and suffix should be passed as arguments to the decorator. Use this decorator to modify a function that takes a string argument and returns the string reversed.
def prefix_suffix_decorator(prefix, suffix):
    def decorator(func):
        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            return prefix + result + suffix
        return wrapper
    return decorator

@prefix_suffix_decorator("[", "]")
def reverse_string(s):
    return s[::-1]

result = reverse_string("hello world")
print(result)
</code>
	</div>
</body>
</html>