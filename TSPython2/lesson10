<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>TSPython</title>
	<link rel="stylesheet" type="text/css" href="style.css">
  <script src="script.js"></script>
</head>
<body>
 	<div class="banner">
	  <a class="banner-title" href = "/">TSPython</a>
	  <div class="banner-links">
	    <a class="banner-link" href="lesson1">Introduction</a>
	    <a class="banner-link" href="lesson2">Conditionals</a>
	    <a class="banner-link" href="lesson3">Loops</a>
	    <a class="banner-link" href="lesson4">Lists</a>
	    <a class="banner-link" href="lesson5">Functions</a>
      <a class="banner-link" href="lesson6">Dictionaries</a>
      <a class="banner-link" href="lesson7">Objects</a>
      <a class="banner-link" href="lesson8">Decorators</a>
      <a class="banner-link" href="lesson9">Generators</a>
      <a class="banner-link" style = "color: #5CE1E6" href="lesson10">Files</a>
      <a class="banner-link" href="other">Other</a>
	  </div>
	</div>

	<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vQPba99q5SaNpdZ_a6PF8KoEdbYQjoyFXzI67lpG018P-VmmE5pqO_TwZiiCLDGG03SpXRdbk-JuriE/embed?start=false&loop=false&delayms=3000" frameborder="0" height="500"></iframe>

	<iframe src="text.html" height="501" style ="margin-top:0px"></iframe>

	<div class="code-container">
<code>#1. Write a function that asks a specified amount of random questions from a text file and tells the user whether they are correct or not.
import json
import random

with open('questions.txt', 'r') as f:
  lines = [line.strip() for line in f]

random.shuffle(lines)

def quiz(amt):
  chosenLines = lines[:amt]
  questions = []
  answers = []
  score = 0
  for line in chosenLines:
    question, answer = line.split('?')
    questions.append(question)
    answers.append(answer)
  for i in range(amt):
    response = input(f"{i+1}. {questions[i]}? ")
    if response.lower() == answers[i].lower():
      print("That is correct!")
      score += 1
    else:
      print("That is incorrect.")
  print(f"You Scored: {score}/{amt}")

quiz(3)

#2. Modify the previous program to write the userâ€™s responses and results into a separate file.
with open('questions.txt', 'r') as f:
  lines = [line.strip() for line in f]

random.shuffle(lines)

def quiz(amt):
  chosenLines = lines[:amt]
  questions = []
  answers = []
  score = 0
  with open('results.txt', 'w') as f:
    f.write('')
  for line in chosenLines:
    question, answer = line.split('?')
    questions.append(question)
    answers.append(answer)
  for i in range(amt):
    response = input(f"{i+1}. {questions[i]}? ")
    if response.lower() == answers[i].lower():
      print("That is correct!")
      with open('results.txt', 'a') as f:
        f.write(f"{i+1}. {response} (Correct)\n")
      score += 1
    else:
      print("That is incorrect.")
      with open('results.txt', 'a') as f:
        f.write(f"{i+1}. {response} (Incorrect)\n")
  with open('results.txt', 'a') as f:
    f.write(f"Score: {score} / {amt}")
  print(f"You Scored: {score}/{amt}")

quiz(3)

#3. WeatherApp Class
import requests
import json

class WeatherApp:
  def __init__(self, api_key):
    self.api_key = api_key
    
  def store_weather_data(self, location):
    location = location.replace(" ", "%20")
    url = f"https://api.openweathermap.org/data/2.5/weather?q={location}&appid={self.api_key}&units=metric"
    response = requests.get(url)
    data = response.json()
    with open('weather.json', 'w') as f:
      json.dump(data, f)
    
  def get_weather_data(self):
    with open('weather.json', 'r') as f:
      data = json.load(f)
    return data
    
  def print_weather_data(self):
    data = self.get_weather_data()
    temperature = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    location = data["name"]
    print(f"The current temperature in {location} is {temperature} degrees Celsius, with a humidity of {humidity} percent.")

api_key = "7064e43b7deb9553b7e67617213aceb1"
app = WeatherApp(api_key)
app.store_weather_data("New York")
app.print_weather_data()

#4. BeautifulSoup Practice Exercises
#A) Import the necessary modules and read in the HTML document.
from bs4 import BeautifulSoup

with open("example.html") as fp:
    soup = BeautifulSoup(fp, "html.parser")

#B)  Use find to find the first a tag.
a_tag = soup.find("a")
print(a_tag)

print("-----")
#C) Use find_all to find all li tags.
li_tags = soup.find_all("li")
for li_tag in li_tags:
    print(li_tag)

print("-----")
#D) Use find_all to find all tags with a class attribute of "title".
title_tags = soup.find_all(class_="title")
for title_tag in title_tags:
    print(title_tag)

print("-----")
#E) Use find_all to find all div tags with a class attribute of "title".
div_tags = soup.find_all("div", class_="title")
for div_tag in div_tags:
    print(div_tag)

print("-----")
#F) Use find_all to find all div tags with an id attribute of "content".
div_tags = soup.find_all("div", {"id": "content"})
for div_tag in div_tags:
    print(div_tag)

print("-----")
#G) Use find_all to find all the li tags within the first div tag.
div_tag = soup.find("div")
li_tags = div_tag.find_all("li")
for li in li_tags:
  print(li)

#5. Write a program that plays a Higher or Lower game based on Rotten Tomatoes ratings for the 50 highest grossing movies.
import requests
from bs4 import BeautifulSoup

url = 'https://editorial.rottentomatoes.com/article/highest-grossing-movies-all-time/'
response = requests.get(url)

soup = BeautifulSoup(response.text, 'html.parser')

movies = list(soup.find_all(class_ ="title"))
titles = [movie.text.strip() for movie in movies]
scores = list(soup.find_all(class_ = "score"))
scores = [score.text.strip() for score in scores]

def playGame():
  print('Welcome to the higher or lower game based on Rotten Tomatoes scores!\n')
  score = 0
  for i in range(len(movies)):
      print(f"{titles[i]} ({scores[i]}) vs {titles[i+1]}")
      if i == len(movies) - 1:
          print('\nYou have reached the end of the game!')
          break
      
      choice = input('Higher or lower? (h/l) ')
      if choice == 'h':
          if scores[i+1] > scores[i]:
              print('Correct!')
              score += 1
          else:
              print('Sorry, incorrect.')
              break
      elif choice == 'l':
          if scores[i+1] < scores[i]:
              print('Correct!')
              score += 1
          else:
              print('Sorry, incorrect.')
              break
      else:
          print('Invalid choice, game over.')
          break
  print(f"You scored {score} points.")

playGame()
</code>
	</div>
</body>
</html>